"""
FOR MILESTONE 1 - TEAM 03

Create the models to define the structure of database tables
"""
from django.db import models


class Region(models.Model):
    name = models.CharField(max_length=200) #Region name
    min_longitude = models.FloatField() # Minimum Long of the image
    min_latitude = models.FloatField() # Minimum Latitude of the image
    max_longitude = models.FloatField() # Minimum Long of the image
    max_latitude = models.FloatField() # Maximum Latitude of the image
    view_longitude = models.FloatField() # View of the Region in the map
    view_latitude = models.FloatField() # View of the Region in the map
    last_update = models.DateTimeField(null=True, editable=False) # When the region was last updated
    stored_at = models.DateTimeField() # When data was stored in database

    def __str__(self):
        return self.name

class User(models.Model):
    about = models.TextField(blank=True) # A short description about the user
    avatar = models.CharField(max_length=1000) # URL to the user's profile photo
    created_at = models.DateTimeField() # When user joined Mapillary
    key = models.CharField(unique=True, max_length=200) # Unique identifier of the user
    username = models.CharField(max_length=200) # Login username
    stored_at = models.DateTimeField() # When data was stored in database

    def __str__(self):
        return self.username

class Sequence(models.Model):
    camera_make = models.CharField(max_length=200) # Camera manufacture
    captured_at = models.DateTimeField() # When sequence was captured
    created_at = models.DateTimeField() # When sequence was uploaded
    key = models.CharField(unique = True, max_length=200) # Unique Identifier of the sequence
    pano = models.BooleanField() # Whether the sequence is panorama or not
    user_key = models.ForeignKey(User, on_delete=models.CASCADE) # User who captured the sequence; 1 user - many sequences
    region_key = models.ForeignKey(Region, on_delete=models.CASCADE) #Region where the sequence is stored
    stored_at = models.DateTimeField() # When data was stored in database
    points_in_seq = models.IntegerField() # Stores how many points are in the sequence
    def __str__(self):
        return self.key

class Coordinate_property(models.Model):
    ca = models.FloatField(null=True) # Camera angles either in [0, 360) degrees, or -1 which indicates the corresponding CA is missing
    image_key = models.CharField(unique = True, max_length=200) # Image key for coordinates
    sequence_key = models.ForeignKey(Sequence, on_delete=models.CASCADE) # Identifier of the sequence
    longitude = models.FloatField(null=True) # Longitude of the image
    latitude = models.FloatField(null=True) # Latitude of the image
    direction = models.FloatField(null=True) #Direction angles either in [0, 360) degrees, generated by algorithm
    neighbors = models.CharField(null=True, max_length=200) # Id of  neighbors of the particular coordinate
    weather = models.CharField(max_length=200, default= 'N.A.') # Describe the weather N.A
    filename = models.CharField(null=True, max_length=200) # Name of the file where the image is stored
    
    def __str__(self):
        return self.image_key